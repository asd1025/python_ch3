- 기본적으로 장고 프로젝트 한 개당 한 개의 DB를 사용한다
- 장고 프로젝트에는 기본적으로 관리프로그램이 내장되기 때문에

- postgresql db 생성 및 계정생성 접근 권한 부여
1. create database djdb;
2. create user djdb with password 'djdb';
3. grant all privileges on all tables in schema public to djdb;
4. data/pg_hba_conf 접근 설정



- pycharm ( community ) 에서 Django 프로젝트 시작하기

1. pycharm 프로젝트 생성 ( python 프로젝트 )

2. Django 설치
    [터미널]
    pip install django

3. 장고 프로그램 생성
    [터미널]
    django-admin startproject python_ch3

4. 디렉토리 정리
    -> pycharm 프로젝트와 django 프로젝트의 디렉토리 일치시키는 작업

5. psycopg2(postgres db lib) 설치
    [터미널]
    pip install psycopg2


6. settings.py 설정
    1) TIME_ZONE = 'Asia'
    2)
        DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'djdb',
            'USER' : 'djdb',
            'PASSWORD' : 'djdb',
            'HOST' : '192.168.1.145',
            'PORT' :5432
         }
    }
    3) Template 디렉토리 설정
        TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR,'template')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]




7. 장고 프로젝트의 기본 관리 어플리케이션이 사용하는 테이블을 생성
    [터미널]
    python manage.py migrate


8. 장고 프로젝트의 기본 관리 어플리케이션 로그인 계정 생성하기
    (관리 계정 생성하기)
    [터미널]
    python manage.py createsuperuser

9. 지금까지 작업 내용 확인하기
    [터미널]
    python manage.py runserver 0.0.0.0:8888



=====================================================================

1) Application 작업
    1.  어플리케이션 추가
        [터미널]
        python manage.py startapp helloworld

    2. 어플리케이션 등록 (settings.py)
            INSTALLED_APPS = [
            'helloworld',
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
        ]

    3. template
        | ---- helloworld
       어플리케이션 template 디렉토리 생성

    4 Model 정의 (생략)

    5. urls.py 에서 url-view의 handler 맵핑

    6. views.py 에서 핸들러 함수 추가 구현 ( 요청처리, 모델작업, 응답처리 )

    7. 혹시 화면이 필요한 경우, 해당 template 작업


2) emaillist
 1.  어플리케이션 추가
        [터미널]
        python manage.py startapp emaillist

    2. 어플리케이션 등록 (settings.py)
            INSTALLED_APPS = [
            'helloworld',
            'emaillist',
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
        ]

    3. template
            | ---- emaillist
           어플리케이션 template 디렉토리 생성

    4-1 Model 정의 (** 모델이 변화되면 4-3, 4-4 를 꼭 해줘야함 )
    4-2 admin.py 에 admin.site.register(Emaillist) -->> 안해줘도 상관은 없음
    4-3. migrations 이름의 DDL python 모듈을 생성
                 python manage.py makemigrations -->> 동기화 시키는 거임
    4-4. 물리DB 와 스키마 동기화 작업을 한다
            python manage.py migrate -->> DB 동기화

    5. urls.py 에서 url-view의 handler 맵핑

    6. views.py 에서 핸들러 함수 추가 구현 ( 요청처리, 모델작업, 응답처리 )

    7. 혹시 화면이 필요한 경우, 해당 template 작업